{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativePaper = require(\"react-native-paper\");\n\nvar _index = _interopRequireDefault(require(\"./src/redux/index\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-async-storage/async-storage\"));\n\nvar _client = require(\"@apollo/client\");\n\nvar _config = require(\"./src/utils/config\");\n\nvar _MainStackNavigator = _interopRequireDefault(require(\"./src/router/MainStackNavigator\"));\n\nvar _reactNativeSplashScreen = _interopRequireDefault(require(\"react-native-splash-screen\"));\n\nvar _reactNativeFlashMessage = _interopRequireDefault(require(\"react-native-flash-message\"));\n\nvar _reactNativeTouchId = _interopRequireDefault(require(\"react-native-touch-id\"));\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Project\\\\qaim\\\\fornax-wallet\\\\App.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar BgImage = './assets/images/Layer.png';\n\nvar styles = _reactNative.StyleSheet.create({\n  image: {\n    flex: 1\n  },\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row',\n    maxWidth: 415\n  }\n});\n\nvar theme = (0, _extends2.default)({}, _reactNativePaper.DefaultTheme, {\n  fonts: (0, _reactNativePaper.configureFonts)(_config.fontConfig)\n});\nvar client = new _client.ApolloClient({\n  uri: 'http://45.79.253.185:4001/graphql',\n  cache: new _client.InMemoryCache()\n});\n\nvar App = function App() {\n  var _useState = (0, _react.useState)(''),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      initRoute = _useState2[0],\n      setInitRoute = _useState2[1];\n\n  var flashRef = (0, _react.useRef)(null);\n  var optionalConfigObject = {\n    title: 'Fingerprint',\n    imageColor: '#363853',\n    imageErrorColor: '#ff0000',\n    sensorDescription: 'Put your finger on the fingerprint scanner',\n    sensorErrorDescription: 'Failed',\n    cancelText: 'Cancel',\n    fallbackLabel: 'Show Passcode',\n    unifiedErrors: false,\n    passcodeFallback: false\n  };\n\n  var handleRoute = function _callee() {\n    var registerUser, loginUser, faceId, fingerId, loginPin, isloginPin, accountList;\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regenerator.default.awrap(_asyncStorage.default.getItem('registerUser'));\n\n          case 2:\n            registerUser = _context.sent;\n\n            if (!(registerUser === null)) {\n              _context.next = 6;\n              break;\n            }\n\n            setInitRoute('Intro');\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return _regenerator.default.awrap(_asyncStorage.default.getItem('loginUser'));\n\n          case 8:\n            loginUser = _context.sent;\n\n            if (!(loginUser === null)) {\n              _context.next = 12;\n              break;\n            }\n\n            setInitRoute('Login');\n            return _context.abrupt(\"return\");\n\n          case 12:\n            _context.next = 14;\n            return _regenerator.default.awrap(_asyncStorage.default.getItem('isfaceId'));\n\n          case 14:\n            faceId = _context.sent;\n            _context.next = 17;\n            return _regenerator.default.awrap(_asyncStorage.default.getItem('isfingerId'));\n\n          case 17:\n            fingerId = _context.sent;\n            _context.next = 20;\n            return _regenerator.default.awrap(_asyncStorage.default.getItem('loginPin'));\n\n          case 20:\n            loginPin = _context.sent;\n            _context.next = 23;\n            return _regenerator.default.awrap(_asyncStorage.default.getItem('isLoginPinSet'));\n\n          case 23:\n            isloginPin = _context.sent;\n            _context.next = 26;\n            return _regenerator.default.awrap(_asyncStorage.default.getItem('accountList'));\n\n          case 26:\n            accountList = _context.sent;\n\n            if (faceId || fingerId) {\n              _reactNativeTouchId.default.authenticate('Open your FornaxWallet', optionalConfigObject).then(function (success) {\n                if (accountList === null) {\n                  setInitRoute('WalletSetup');\n                  return;\n                }\n\n                if (registerUser && loginUser && accountList && loginPin && isloginPin) {\n                  setInitRoute('Dashboard');\n                  return;\n                }\n\n                console.log(success, \"success\");\n              }).catch(function (error) {\n                console.log(error, \"error\");\n              });\n            }\n\n            if (!(loginPin === null)) {\n              _context.next = 31;\n              break;\n            }\n\n            setInitRoute('Login');\n            return _context.abrupt(\"return\");\n\n          case 31:\n            if (!(loginPin && isloginPin === null)) {\n              _context.next = 34;\n              break;\n            }\n\n            setInitRoute('LoginPin');\n            return _context.abrupt(\"return\");\n\n          case 34:\n            if (!(accountList === null)) {\n              _context.next = 37;\n              break;\n            }\n\n            setInitRoute('WalletSetup');\n            return _context.abrupt(\"return\");\n\n          case 37:\n            if (!(registerUser && loginUser && accountList && loginPin && isloginPin)) {\n              _context.next = 40;\n              break;\n            }\n\n            setInitRoute('Dashboard');\n            return _context.abrupt(\"return\");\n\n          case 40:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var appState = (0, _react.useRef)(_reactNative.AppState.currentState);\n\n  var _useState3 = (0, _react.useState)(appState.current),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      appStateVisible = _useState4[0],\n      setAppStateVisible = _useState4[1];\n\n  var removePin = function _callee2() {\n    return _regenerator.default.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regenerator.default.awrap(_asyncStorage.default.removeItem('isLoginPinSet'));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  (0, _react.useEffect)(function () {\n    var subscription = _reactNative.AppState.addEventListener(\"change\", function (nextAppState) {\n      if (appState.current.match(/inactive|background/) && nextAppState === \"active\") {\n        console.log(\"App has come to the foreground!\");\n      }\n\n      appState.current = nextAppState;\n      setAppStateVisible(appState.current);\n      console.log(\"AppState\", appState.current, appStateVisible);\n    });\n\n    return function () {\n      removePin();\n      subscription.remove();\n    };\n  }, []);\n  (0, _react.useEffect)(function () {\n    handleRoute();\n  }, []);\n  (0, _react.useEffect)(function () {\n    initRoute && _reactNativeSplashScreen.default.hide();\n  }, [initRoute]);\n  return _react.default.createElement(_client.ApolloProvider, {\n    client: client,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactRedux.Provider, {\n    store: _index.default,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNative.ImageBackground, {\n    source: require(BgImage),\n    resizeMode: \"cover\",\n    style: styles.image,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNativePaper.Provider, {\n    theme: theme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, _react.default.createElement(_reactNativeFlashMessage.default, {\n    position: \"bottom\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, initRoute ? _react.default.createElement(_MainStackNavigator.default, {\n    initRoute: initRoute,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }) : _react.default.createElement(_reactNative.Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }\n  }, \"Loading....\")), _react.default.createElement(_reactNativeFlashMessage.default, {\n    ref: flashRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  })))));\n};\n\nvar _default = App;\nexports.default = _default;","map":{"version":3,"sources":["D:/Project/qaim/fornax-wallet/App.tsx"],"names":["BgImage","styles","StyleSheet","create","image","flex","container","justifyContent","alignItems","flexDirection","maxWidth","theme","PaperDefaultTheme","fonts","fontConfig","client","ApolloClient","uri","cache","InMemoryCache","App","initRoute","setInitRoute","flashRef","optionalConfigObject","title","imageColor","imageErrorColor","sensorDescription","sensorErrorDescription","cancelText","fallbackLabel","unifiedErrors","passcodeFallback","handleRoute","AsyncStorage","getItem","registerUser","loginUser","faceId","fingerId","loginPin","isloginPin","accountList","TouchID","authenticate","then","success","console","log","catch","error","appState","AppState","currentState","current","appStateVisible","setAppStateVisible","removePin","removeItem","subscription","addEventListener","nextAppState","match","remove","SplashScreen","hide","store","require"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { AppState, ImageBackground, StyleSheet, Text, View } from 'react-native';\r\nimport {\r\n  configureFonts,\r\n  DefaultTheme as PaperDefaultTheme,\r\n  Provider as PaperProvider,\r\n} from 'react-native-paper';\r\nimport store from './src/redux/index';\r\nimport { Provider } from 'react-redux';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\r\nimport { fontConfig } from './src/utils/config';\r\nimport MainStackNavigator from './src/router/MainStackNavigator';\r\nimport SplashScreen from 'react-native-splash-screen';\r\nimport FlashMessage from \"react-native-flash-message\";\r\nimport _ from 'lodash';\r\nimport TouchID from 'react-native-touch-id';\r\n\r\nconst BgImage = './assets/images/Layer.png';\r\n\r\nconst styles = StyleSheet.create({\r\n  image: {\r\n    flex: 1,\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    maxWidth: 415,\r\n  },\r\n});\r\n\r\nconst theme = {\r\n  ...PaperDefaultTheme,\r\n  fonts: configureFonts(fontConfig),\r\n};\r\n\r\n// Initialize Apollo Client\r\nconst client = new ApolloClient({\r\n  uri: 'http://45.79.253.185:4001/graphql',\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nconst App = () => {\r\n  const [initRoute, setInitRoute] = useState('');\r\n  const flashRef = useRef(null);\r\n\r\n  const optionalConfigObject = {\r\n    title: 'Fingerprint', // Android\r\n    imageColor: '#363853', // Android\r\n    imageErrorColor: '#ff0000', // Android\r\n    sensorDescription: 'Put your finger on the fingerprint scanner', // Android\r\n    sensorErrorDescription: 'Failed', // Android\r\n    cancelText: 'Cancel', // Android\r\n    fallbackLabel: 'Show Passcode', // iOS (if empty, then label is hidden)\r\n    unifiedErrors: false, // use unified error messages (default false)\r\n    passcodeFallback: false,\r\n  }\r\n\r\n  const handleRoute = async () => {\r\n    const registerUser = await AsyncStorage.getItem('registerUser');\r\n    if (registerUser === null) {\r\n      setInitRoute('Intro');\r\n      return;\r\n    }\r\n    const loginUser = await AsyncStorage.getItem('loginUser');\r\n    if (loginUser === null) {\r\n      setInitRoute('Login');\r\n      return;\r\n    }\r\n    const faceId = await AsyncStorage.getItem('isfaceId');\r\n    const fingerId = await AsyncStorage.getItem('isfingerId');\r\n    const loginPin = await AsyncStorage.getItem('loginPin');\r\n    const isloginPin = await AsyncStorage.getItem('isLoginPinSet');\r\n    const accountList = await AsyncStorage.getItem('accountList');\r\n    if (faceId || fingerId) {\r\n      TouchID.authenticate('Open your FornaxWallet', optionalConfigObject)\r\n        .then((success: any) => {\r\n          if (accountList === null) {\r\n            setInitRoute('WalletSetup');\r\n            return;\r\n          }\r\n          if (registerUser && loginUser && accountList && (loginPin && isloginPin)) {\r\n            setInitRoute('Dashboard');\r\n            return;\r\n          }\r\n          console.log(success, \"success\");\r\n        })\r\n        .catch((error: any) => {\r\n          console.log(error, \"error\");\r\n          // Failure code\r\n        });\r\n    }\r\n    if(loginPin === null) {\r\n      setInitRoute('Login');\r\n      return;\r\n    }\r\n    if (loginPin && isloginPin === null) {\r\n      setInitRoute('LoginPin');\r\n      return;\r\n    }\r\n    if (accountList === null) {\r\n      setInitRoute('WalletSetup');\r\n      return;\r\n    }\r\n    if (registerUser && loginUser && accountList && (loginPin && isloginPin)) {\r\n      setInitRoute('Dashboard');\r\n      return;\r\n    }\r\n  };\r\n\r\n  const appState = useRef(AppState.currentState);\r\n  const [appStateVisible, setAppStateVisible] = useState(appState.current);\r\n\r\n  const removePin = async () => {\r\n    await AsyncStorage.removeItem('isLoginPinSet');\r\n  }\r\n\r\n  useEffect(() => {\r\n    const subscription = AppState.addEventListener(\"change\", nextAppState => {\r\n      if (\r\n        appState.current.match(/inactive|background/) &&\r\n        nextAppState === \"active\"\r\n      ) {\r\n        console.log(\"App has come to the foreground!\");\r\n      }\r\n\r\n      appState.current = nextAppState;\r\n      setAppStateVisible(appState.current);\r\n      console.log(\"AppState\", appState.current, appStateVisible);\r\n    });\r\n\r\n    return  () => {\r\n      removePin();\r\n      subscription.remove();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    handleRoute();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    initRoute && SplashScreen.hide();\r\n  }, [initRoute]);\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Provider store={store}>\r\n        <ImageBackground\r\n          source={require(BgImage)}\r\n          resizeMode=\"cover\"\r\n          style={styles.image}>\r\n          <PaperProvider theme={theme}>\r\n            <FlashMessage position=\"bottom\" />\r\n            <View style={styles.container}>\r\n              {initRoute ? (\r\n                <MainStackNavigator initRoute={initRoute} />\r\n              ) : (\r\n                <Text>Loading....</Text>\r\n              )}\r\n            </View>\r\n            <FlashMessage ref={flashRef} />\r\n          </PaperProvider>\r\n        </ImageBackground>\r\n      </Provider>\r\n    </ApolloProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"script"}