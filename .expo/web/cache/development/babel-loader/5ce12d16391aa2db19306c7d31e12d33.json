{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useResponderEvents;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar ResponderSystem = _interopRequireWildcard(require(\"./ResponderSystem\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar emptyObject = {};\nvar idCounter = 0;\n\nfunction useStable(getInitialValue) {\n  var ref = React.useRef(null);\n\n  if (ref.current == null) {\n    ref.current = getInitialValue();\n  }\n\n  return ref.current;\n}\n\nfunction useResponderEvents(hostRef) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyObject;\n  var id = useStable(function () {\n    return idCounter++;\n  });\n  var isAttachedRef = React.useRef(false);\n  React.useEffect(function () {\n    ResponderSystem.attachListeners();\n    return function () {\n      ResponderSystem.removeNode(id);\n    };\n  }, [id]);\n  React.useEffect(function () {\n    var onMoveShouldSetResponder = config.onMoveShouldSetResponder,\n        onMoveShouldSetResponderCapture = config.onMoveShouldSetResponderCapture,\n        onScrollShouldSetResponder = config.onScrollShouldSetResponder,\n        onScrollShouldSetResponderCapture = config.onScrollShouldSetResponderCapture,\n        onSelectionChangeShouldSetResponder = config.onSelectionChangeShouldSetResponder,\n        onSelectionChangeShouldSetResponderCapture = config.onSelectionChangeShouldSetResponderCapture,\n        onStartShouldSetResponder = config.onStartShouldSetResponder,\n        onStartShouldSetResponderCapture = config.onStartShouldSetResponderCapture;\n    var requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null;\n    var node = hostRef.current;\n\n    if (requiresResponderSystem) {\n      ResponderSystem.addNode(id, node, config);\n      isAttachedRef.current = true;\n    } else if (isAttachedRef.current) {\n      ResponderSystem.removeNode(id);\n      isAttachedRef.current = false;\n    }\n  }, [config, hostRef, id]);\n  React.useDebugValue({\n    isResponder: hostRef.current === ResponderSystem.getResponderNode()\n  });\n  React.useDebugValue(config);\n}","map":{"version":3,"sources":["D:/Project/qaim/fornax-wallet/node_modules/react-native-web/src/modules/useResponderEvents/index.js"],"names":["emptyObject","idCounter","useStable","getInitialValue","ref","React","useRef","current","useResponderEvents","hostRef","config","id","isAttachedRef","useEffect","ResponderSystem","attachListeners","removeNode","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","requiresResponderSystem","node","addNode","useDebugValue","isResponder","getResponderNode"],"mappings":";;;;;AAqBA;;AACA;;;;;;AAEA,IAAMA,WAAW,GAAG,EAApB;AACA,IAAIC,SAAS,GAAG,CAAhB;;AAEA,SAASC,SAAT,CAAsBC,eAAtB,EAAmD;AACjD,MAAMC,GAAG,GAAGC,KAAK,CAACC,MAAN,CAAuB,IAAvB,CAAZ;;AACA,MAAIF,GAAG,CAACG,OAAJ,IAAe,IAAnB,EAAyB;AACvBH,IAAAA,GAAG,CAACG,OAAJ,GAAcJ,eAAe,EAA7B;AACD;;AACD,SAAOC,GAAG,CAACG,OAAX;AACD;;AAEc,SAASC,kBAAT,CAA4BC,OAA5B,EAAiF;AAAA,MAAvCC,MAAuC,uEAAbV,WAAa;AAC9F,MAAMW,EAAE,GAAGT,SAAS,CAAC;AAAA,WAAMD,SAAS,EAAf;AAAA,GAAD,CAApB;AACA,MAAMW,aAAa,GAAGP,KAAK,CAACC,MAAN,CAAa,KAAb,CAAtB;AAKAD,EAAAA,KAAK,CAACQ,SAAN,CAAgB,YAAM;AACpBC,IAAAA,eAAe,CAACC,eAAhB;AACA,WAAO,YAAM;AACXD,MAAAA,eAAe,CAACE,UAAhB,CAA2BL,EAA3B;AACD,KAFD;AAGD,GALD,EAKG,CAACA,EAAD,CALH;AAQAN,EAAAA,KAAK,CAACQ,SAAN,CAAgB,YAAM;AACpB,QACEI,wBADF,GASIP,MATJ,CACEO,wBADF;AAAA,QAEEC,+BAFF,GASIR,MATJ,CAEEQ,+BAFF;AAAA,QAGEC,0BAHF,GASIT,MATJ,CAGES,0BAHF;AAAA,QAIEC,iCAJF,GASIV,MATJ,CAIEU,iCAJF;AAAA,QAKEC,mCALF,GASIX,MATJ,CAKEW,mCALF;AAAA,QAMEC,0CANF,GASIZ,MATJ,CAMEY,0CANF;AAAA,QAOEC,yBAPF,GASIb,MATJ,CAOEa,yBAPF;AAAA,QAQEC,gCARF,GASId,MATJ,CAQEc,gCARF;AAWA,QAAMC,uBAAuB,GAC3BR,wBAAwB,IAAI,IAA5B,IACAC,+BAA+B,IAAI,IADnC,IAEAC,0BAA0B,IAAI,IAF9B,IAGAC,iCAAiC,IAAI,IAHrC,IAIAC,mCAAmC,IAAI,IAJvC,IAKAC,0CAA0C,IAAI,IAL9C,IAMAC,yBAAyB,IAAI,IAN7B,IAOAC,gCAAgC,IAAI,IARtC;AAUA,QAAME,IAAI,GAAGjB,OAAO,CAACF,OAArB;;AAEA,QAAIkB,uBAAJ,EAA6B;AAC3BX,MAAAA,eAAe,CAACa,OAAhB,CAAwBhB,EAAxB,EAA4Be,IAA5B,EAAkChB,MAAlC;AACAE,MAAAA,aAAa,CAACL,OAAd,GAAwB,IAAxB;AACD,KAHD,MAGO,IAAIK,aAAa,CAACL,OAAlB,EAA2B;AAChCO,MAAAA,eAAe,CAACE,UAAhB,CAA2BL,EAA3B;AACAC,MAAAA,aAAa,CAACL,OAAd,GAAwB,KAAxB;AACD;AACF,GA/BD,EA+BG,CAACG,MAAD,EAASD,OAAT,EAAkBE,EAAlB,CA/BH;AAiCAN,EAAAA,KAAK,CAACuB,aAAN,CAAoB;AAAEC,IAAAA,WAAW,EAAEpB,OAAO,CAACF,OAAR,KAAoBO,eAAe,CAACgB,gBAAhB;AAAnC,GAApB;AACAzB,EAAAA,KAAK,CAACuB,aAAN,CAAoBlB,MAApB;AACD","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * Hook for integrating the Responder System into React\n *\n *   function SomeComponent({ onStartShouldSetResponder }) {\n *     const ref = useRef(null);\n *     useResponderEvents(ref, { onStartShouldSetResponder });\n *     return <div ref={ref} />\n *   }\n */\n\nimport type { ResponderConfig } from './ResponderSystem';\n\nimport * as React from 'react';\nimport * as ResponderSystem from './ResponderSystem';\n\nconst emptyObject = {};\nlet idCounter = 0;\n\nfunction useStable<T>(getInitialValue: () => T): T {\n  const ref = React.useRef<T | null>(null);\n  if (ref.current == null) {\n    ref.current = getInitialValue();\n  }\n  return ref.current;\n}\n\nexport default function useResponderEvents(hostRef: any, config: ResponderConfig = emptyObject) {\n  const id = useStable(() => idCounter++);\n  const isAttachedRef = React.useRef(false);\n\n  // This is a separate effects so it doesn't run when the config changes.\n  // On initial mount, attach global listeners if needed.\n  // On unmount, remove node potentially attached to the Responder System.\n  React.useEffect(() => {\n    ResponderSystem.attachListeners();\n    return () => {\n      ResponderSystem.removeNode(id);\n    };\n  }, [id]);\n\n  // Register and unregister with the Responder System as necessary\n  React.useEffect(() => {\n    const {\n      onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture,\n      onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture,\n      onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder,\n      onStartShouldSetResponderCapture\n    } = config;\n\n    const requiresResponderSystem =\n      onMoveShouldSetResponder != null ||\n      onMoveShouldSetResponderCapture != null ||\n      onScrollShouldSetResponder != null ||\n      onScrollShouldSetResponderCapture != null ||\n      onSelectionChangeShouldSetResponder != null ||\n      onSelectionChangeShouldSetResponderCapture != null ||\n      onStartShouldSetResponder != null ||\n      onStartShouldSetResponderCapture != null;\n\n    const node = hostRef.current;\n\n    if (requiresResponderSystem) {\n      ResponderSystem.addNode(id, node, config);\n      isAttachedRef.current = true;\n    } else if (isAttachedRef.current) {\n      ResponderSystem.removeNode(id);\n      isAttachedRef.current = false;\n    }\n  }, [config, hostRef, id]);\n\n  React.useDebugValue({ isResponder: hostRef.current === ResponderSystem.getResponderNode() });\n  React.useDebugValue(config);\n}\n"]},"metadata":{},"sourceType":"script"}